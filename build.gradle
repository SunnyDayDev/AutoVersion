import groovy.swing.SwingBuilder

plugins {
    id "com.gradle.plugin-publish" version "0.9.7"
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

//repositories {
    //google()
    //jcenter()
//}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    //implementation 'com.android.tools.build:gradle:2.3.3'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

group='me.sunnydaydev'
archivesBaseName = "autoversion"
version='0.0.4'

uploadArchives {

    repositories {

        int MAVEN = 0
        int LOCAL = 1
        int SAMPLE = 2

        int where = MAVEN

        boolean checkWhere = project.gradle.startParameter.taskNames.contains('uploadArchives')

        if (checkWhere) {

            boolean cancelled = true

            new SwingBuilder().edt {

                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Build version.', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                        show: true // Let's show it
                ) {

                    vbox {

                        label text: "Where to upload?"

                        hbox {

                            button defaultButton: true, text: 'Maven Central', actionPerformed: {
                                cancelled = false
                                dispose()
                            }

                            button defaultButton: true, text: 'Local', actionPerformed: {
                                cancelled = false
                                where = LOCAL
                                dispose()
                            }

                            button defaultButton: true, text: 'Samle', actionPerformed: {
                                cancelled = false
                                where = SAMPLE
                                dispose()
                            }

                        }

                    }

                }

            }

            if (cancelled) {
                throw new Exception("Cancelled.")
            }

        }

        def prepearePom = { pom ->

            pom.project {
                name 'AutoVersion'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Automated handling of version code, name and release notes for Android.'
                url 'https://github.com/SunnyDayDev/AutoVersion'

                scm {
                    //connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                    //developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                    url 'https://github.com/SunnyDayDev/AutoVersion'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'sunnydaydev'
                        name 'Aleksandr Tcikin'
                        email 'mail@sunnydaydev.me'
                    }
                }
            }

        }

        switch (where) {

            case MAVEN:

                mavenDeployer {

                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    prepearePom(pom)

                }

                break

            case LOCAL:

                mavenDeployer {

                    repository(url: mavenLocal().url)
                    prepearePom(pom)

                }

                break

            case SAMPLE:

                mavenDeployer {

                    repository(url: uri('sample/repo'))
                    prepearePom(pom)

                }

                break
        }
    }

}

pluginBundle {

    plugins {

        autoversionPlugin {

            id = 'me.sunnydaydev.autoversion'
            displayName = 'AutoVersion'

            website = 'https://sunnydaydev.me/'
            description = 'Autoversion android build'
            vcsUrl = 'https://github.com/SunnyDayDev/AutoVersion'
            tags = ['android']

        }

    }

}